# The following documentation is largely for myself. I intend to publish a nicer
# write-up once this is a smoother workflow.
#
# 1. Create the expected directory structure:
#    % mkdir -p ~/d/{pkg,out}
#
# 2. Add the following to your ~/.zshrc:
#   # Define $pkg and $out whenever working in a sub directory of ~/d/pkg/:
#   chpwd_profiles() {
#       if [[ "$PWD" =~ "$HOME/d/(pkg|out)/([^/]*)" ]]
#       then
#           export pkg=$HOME/d/pkg/$match[2]
#           export out=$HOME/d/out/$match[2]
#       else
#           unset pkg
#           unset out
#       fi
#   }
#   chpwd_functions=( ${chpwd_functions[@]} chpwd_profiles )
#   chpwd_profiles  # subshells (e.g. VIM’s :sh) never call chpwd_functions
#
#   # Clones the git sources of a Debian package
#   # needs debcheckout from devscripts and gbp-clone from git-buildpackage
#   d-clone() {
#       local package=$1
#       if ! debcheckout --auth --print $package >/dev/null
#       then
#           echo "debcheckout $package failed. Is $package missing Vcs tags?"
#   	return
#       fi
#   
#       set -- $(debcheckout --auth --print $package)
#       if [ "$1" != "git" ]
#       then
#           echo "$package does not use git, but $1 instead."
#           return
#       fi
#   
#       echo "cloning $2"
#       gbp clone --pristine-tar $2 || return
#   
#       # Change to the newest git repository
#       cd $(dirname $(ls -1td */.git | head -1)) || return
#   
#       echo "d-clone set up everything successfully."
#   }
#
# 3. Create a Debian package directory within ~/d/pkg:
#   ~/d/pkg % d-clone acmetool
#
# 4. Build the Debian package using:
#   ~/d/pkg/acmetool % gbp buildpackage --git-export-dir=$out
#
# 5. Create a changelog entry with an updated version number since the last tagged
#    version:
#   ~/d/pkg/acmetool % gbp dch -R --commit
#
# 6. Upload the resulting package:
#   ~/d/pkg/acmetool % cd $out
#   ~/d/out/acmetool % less *_source.changes
#   # TODO: how can one debdiff against the archive?
#   ~/d/out/acmetool % debdiff <prev>_source.changes <cur>_source.changes  # if you have old builds
#   ~/d/out/acmetool % dput
#   ~/d/out/acmetool % cd $pkg
#   ~/d/pkg/acmetool % gbp push

[clone]
# Ensure the correct orig tarball is present.
postclone=origtargz

[buildpackage]
# Sign tags when running e.g. gbp buildpackage --git-tag-only
sign-tags = True

# sbuild:
#   --source-only-changes
#       In addition to the binary .changes file, also create a _source.changes
#       file which can be used for a source-only upload.
#   -s: build the source package.
#       Without this flag, packages such as
#       src:golang-github-thomsonreuterseikon-go-ntlm will not get an
#       *_amd64.changes file which can actually be uploaded (instead, the
#       changes file would just contain *_all.deb and *.buildinfo)
#   -A: also build “arch: all” packages
#       (sbuild defaults to architecture-specific binaries)
#       For source-only uploads, “arch: all” are built by the buildds, but
#       let’s build them anyways to cover non-source-only upload as well.
#   -v: verbose
#   --no-clean-source: don’t require build-deps on the host (only within
#       sbuild). cleaning is unnecessary, as we use gbp’s --git-export-dir anyway.
builder = sbuild --source-only-changes -s -v -A --no-clean-source

postbuild = echo Running lintian $GBP_CHANGES_FILE: && lintian $(echo $GBP_CHANGES_FILE | sed 's,_all\.changes$,_amd64.changes,g')

# Pick up the orig tarballs created by the origtargz postclone hook.
tarball-dir = ..
